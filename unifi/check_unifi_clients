#!/usr/bin/env python3
"""check_unifi_clients

Script checks number of Wi-Fi clients connected to single UniFi Access Point.
Information is retrieved via SNMPv3 using pysnmp library.
Script output follows standard nagios format with proper exit codes and pefdata string.
In addition to total number of clients perfdata contains separate counter for each
SSID/(2.4GHz|5GHz) combination. --warning and --critical thresholds apply only to total
number of clients connected.
"""

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from re import match, search
from sys import exit as sysexit

from pysnmp.hlapi import (
    ContextData,
    ObjectIdentity,
    ObjectType,
    SnmpEngine,
    UdpTransportTarget,
    UsmUserData,
    nextCmd,
    usmAesCfb128Protocol,
    usmHMACSHAAuthProtocol,
)

AUTH_PROTOCOL = usmHMACSHAAuthProtocol
PRIV_PROTOCOL = usmAesCfb128Protocol
SNMP_PORT = 161
INTEFACE_FILTER = "(ath)[0-9]+"


def unknown_exit(message):
    """Exit in unknown state when SNMP query fails"""
    print(f"WIFI CLIENTS UNKNOWN - {message}")
    sysexit(3)


def add_data_to_set(dataset, varBinds):
    """Parse single SNMP response"""
    dataset.append({})
    for varBind in varBinds:
        interface_id, val = [x.prettyPrint() for x in varBind]
        column_name = search("(unifi.*)[.]", interface_id).group(1)
        dataset[-1][column_name] = val


def get_snmp_data(config):
    """Retrieve necessary data via SNMP"""
    snmp = SnmpEngine()
    authdata = UsmUserData(
        config["login"],
        authKey=config["passwd"],
        privKey=config["privpass"],
        authProtocol=AUTH_PROTOCOL,
        privProtocol=PRIV_PROTOCOL,
    )
    target = UdpTransportTarget((config["hostname"], config["port"]))
    unifi_vap_name = ObjectType(ObjectIdentity("UBNT-UniFi-MIB", "unifiVapName"))
    unifi_vap_stations = ObjectType(
        ObjectIdentity("UBNT-UniFi-MIB", "unifiVapNumStations")
    )
    unifi_vap_ssid = ObjectType(ObjectIdentity("UBNT-UniFi-MIB", "unifiVapEssId"))
    unifi_vap_channel = ObjectType(ObjectIdentity("UBNT-UniFi-MIB", "unifiVapChannel"))
    dataset = []
    for (errorIndication, errorStatus, errorIndex, varBinds) in nextCmd(
        snmp,
        authdata,
        target,
        ContextData(),
        unifi_vap_name,
        unifi_vap_stations,
        unifi_vap_ssid,
        unifi_vap_channel,
        lexicographicMode=False,
    ):
        if errorIndication:
            unknown_exit(errorIndication)
        elif errorStatus:
            status = errorStatus.prettyPrint()
            index = errorIndex and varBinds[int(errorIndex) - 1][0] or "?"
            unknown_exit(f"{status} at {index}")
        else:
            add_data_to_set(dataset, varBinds)
    return dataset


def process_data(dataset, config):
    """Parse retrived data"""
    interfaces = [
        i for i in dataset if match(config["interface_filter"], i["unifiVapName"])
    ]
    total_clients = sum(int(i["unifiVapNumStations"]) for i in interfaces)
    return (interfaces, total_clients)


def add_performace_data(message, interfaces, total_clients, config):
    """Add perfdata to message string"""
    message += " |"
    for interface in interfaces:
        if int(interface["unifiVapChannel"]) <= 13:
            radio = "2.4"
        else:
            radio = "5"
        message += (
            f' \'{interface["unifiVapName"]} '
            f'({interface["unifiVapEssId"]}:{radio})\''
            f'={interface["unifiVapNumStations"]};;;0;'
        )

    message += (
        f" 'total clients'={total_clients} "
        f';{config["warning"]};{config["critical"]};0;'
    )
    return message


def generate_output(interfaces, total_clients, config):
    """Prepare message string and exit code"""
    if total_clients > config["critical"] and config["critical"] > 0:
        state = "CRITICAL"
    elif total_clients > config["warning"] and config["warning"] > 0:
        state = "WARNING"
    else:
        state = "OK"
    message = f"WIFI CLIENTS {state} - {total_clients} currently connected"
    message = add_performace_data(message, interfaces, total_clients, config)
    return state, message


def report(state, message):
    """Print message string and exit"""
    print(message)
    if state == "OK":
        sysexit(0)
    elif state == "WARNING":
        sysexit(1)
    elif state == "CRITICAL":
        sysexit(2)
    elif state == "UNKNOWN":
        sysexit(3)


def main():
    """Parse args and check number of UniFi Wi-Fi clients"""
    parser = ArgumentParser(
        description=__doc__, formatter_class=RawDescriptionHelpFormatter
    )

    parser.add_argument(
        "-H", "--hostname", required=True, help="Name or IPv4 address of host to check"
    )
    parser.add_argument(
        "-P", "--port", default=SNMP_PORT, help=f"SNMP port (Default {SNMP_PORT})"
    )
    parser.add_argument(
        "-l", "--login", required=True, help="Login for snmpv3 authentication "
    )
    parser.add_argument(
        "-x", "--passwd", required=True, help="Password for snmpv3 authentication "
    )
    parser.add_argument(
        "-X", "--privpass", required=True, help="Privacy password for snmpv3"
    )
    parser.add_argument(
        "-i",
        "--interface-filter",
        default=INTEFACE_FILTER,
        help="Regex for filtering out desired network interfaces",
    )
    parser.add_argument(
        "-w",
        "--warning",
        type=int,
        default=0,
        help="Warning level of connected clients",
    )
    parser.add_argument(
        "-c",
        "--critical",
        type=int,
        default=0,
        help="Critical level of connected clients",
    )

    config = vars(parser.parse_args())
    dataset = get_snmp_data(config)
    interfaces, total_clients = process_data(dataset, config)
    state, message = generate_output(interfaces, total_clients, config)
    report(state, message)


if __name__ == "__main__":
    main()
