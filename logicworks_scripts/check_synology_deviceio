#!/usr/bin/env python3
"""check_synology_deviceio

Script checks Synology disk IO.
Information is retrieved via SNMPv3 using pysnmp library.
"""

import argparse

from pysnmp.hlapi import ObjectIdentity, ObjectType

from logicworks_monitoring_lib import (add_common_snmp_args,
                                       add_table_to_dataset,
                                       get_snmp_table_data, report,
                                       unknown_exit)

SERVICE = "SYNOLOGY DEVICE IO"


def add_performace_data(dataset):
    """Add perfdata to message string"""
    message = " |"
    message += f" 'bytes read'" f"={dataset['storageIONReadX']}c;;;;"
    message += f" 'bytes written'" f"={dataset['storageIONWrittenX']}c;;;;"
    message += f" 'IO read'" f"={dataset['storageIOReads']}c;;;;"
    message += f" 'IO write'" f"={dataset['storageIOWrites']}c;;;;"
    message += f" 'IO load1'" f"={dataset['storageIOLA1']};;;;"
    message += f" 'IO load5'" f"={dataset['storageIOLA5']};;;;"
    message += f" 'IO load15'" f"={dataset['storageIOLA15']};;;;"
    return message


def generate_output(config, dataset):
    """Prepare message string and exit code"""
    state = "OK"
    message = ""

    if state == "OK":
        message += f"IO is nominal for device {config['device']}"
    else:
        message += f"IO over limit for device {config['device']}"

    message = f"{SERVICE} {state} - " + message + add_performace_data(dataset)
    return state, message


def main():
    """Parse args and execute script logic"""
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    add_common_snmp_args(parser)
    parser.add_argument(
        "-d", "--device", help="DEV device path",
    )

    config = vars(parser.parse_args())

    dataset = []

    dev_name = ObjectType(ObjectIdentity("SYNOLOGY-STORAGEIO-MIB", "storageIODevice"))
    read_bytes = ObjectType(ObjectIdentity("SYNOLOGY-STORAGEIO-MIB", "storageIONReadX"))
    write_bytes = ObjectType(
        ObjectIdentity("SYNOLOGY-STORAGEIO-MIB", "storageIONWrittenX")
    )
    read_io = ObjectType(ObjectIdentity("SYNOLOGY-STORAGEIO-MIB", "storageIOReads"))
    write_io = ObjectType(ObjectIdentity("SYNOLOGY-STORAGEIO-MIB", "storageIOWrites"))
    io_load_1 = ObjectType(ObjectIdentity("SYNOLOGY-STORAGEIO-MIB", "storageIOLA1"))
    io_load_5 = ObjectType(ObjectIdentity("SYNOLOGY-STORAGEIO-MIB", "storageIOLA5"))
    io_load_15 = ObjectType(ObjectIdentity("SYNOLOGY-STORAGEIO-MIB", "storageIOLA15"))

    try:
        raw_data = get_snmp_table_data(
            config,
            dev_name,
            read_bytes,
            write_bytes,
            read_io,
            write_io,
            io_load_1,
            io_load_5,
            io_load_15,
        )
    except ValueError as err:
        unknown_exit(SERVICE, err)

    add_table_to_dataset(dataset, raw_data)

    io_dataset = {}
    for item in dataset:
        if item["storageIODevice"] == config["device"]:
            io_dataset = item

    state, message = generate_output(config, io_dataset)
    report(state, message)


if __name__ == "__main__":
    main()
